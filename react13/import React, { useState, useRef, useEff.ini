import React, { useState, useRef, useEffect } from 'react';
import { BsFillPlayCircleFill, BsFillPauseCircleFill, BsFillSkipStartCircleFill, BsFillSkipEndCircleFill } from 'react-icons/bs';

const PlaylistItem = ({ name, onClick }) => {
    return (
        <div onClick={onClick} className="list-none m-3">
            <p style={{ cursor: 'pointer' }}>{name}</p>
            <hr />
        </div>
    );
};

const Songs = () => {
    const [selectedItem, setSelectedItem] = useState(null);
    const [isCard1Visible, setIsCard1Visible] = useState(true);
    const [isPlaying, setIsPlaying] = useState(false);
    const [audioIndex, setAudioIndex] = useState(0);
    const [progress, setProgress] = useState(0);
    const audioRef = useRef(null);
    const [currentTime, setCurrentTime] = useState('00:00');
    const [totalTime, setTotalTime] = useState('00:00');

    const list = [
        { id: 1, name: "Vennilavae", image: "minsara.jpg", content: "Content for Vennilavae", src: "Vennilave.mp3" },
        { id: 2, name: "Pachai nirame", image: "alai.jpg", content: "Content for Pachai nirame", src: "Pachchai.mp3" },
        { id: 3, name: "Thanga Thamarai", image: "minsara.jpg", content: "Content for Thanga Thamarai", src: "Thanga.mp3" },
        { id: 4, name: "Endrendrum Punagai", image: "alai.jpg", content: "Content for Endrendrum Punagai", src: "song4.mp3" },
        { id: 5, name: "Snehithanae", image: "alai.jpg", content: "Content for Snehithanae", src: "song5.mp3" }
    ];

    useEffect(() => {
        const audioElement = audioRef.current;
        if (audioElement) {
            audioElement.addEventListener('timeupdate', updateProgress);
            audioElement.addEventListener('ended', handleSongEnd);
        }
        return () => {
            if (audioElement) {
                audioElement.removeEventListener('timeupdate', updateProgress);
                audioElement.removeEventListener('ended', handleSongEnd);
            }
        };
    }, []);

    useEffect(() => {
        if (selectedItem && audioRef.current) {
            const audioElement = audioRef.current;
            const onCanPlayThrough = () => {
                if (audioElement && isPlaying) {
                    audioElement.play().catch(error => console.error('Error attempting to play audio:', error));
                }
                const duration = audioElement.duration;
                const totalMinutes = Math.floor(duration / 60);
                const totalSeconds = Math.floor(duration % 60);
                setTotalTime(`${totalMinutes.toString().padStart(2, '0')}:${totalSeconds.toString().padStart(2, '0')}`);
            };
            
        }
    }, [selectedItem, isPlaying]);

    const handleItemClick = (item, index) => {
        if (selectedItem && selectedItem.id === item.id) {
            handlePlayPause();
        } else {
            setSelectedItem(item);
            setIsCard1Visible(false);
            setIsPlaying(true);
            setAudioIndex(index);

            if (audioRef.current) {
                audioRef.current.pause();
                audioRef.current.src = item.src;
                audioRef.current.load();
                setProgress(0);
                setCurrentTime('00:00');
            }
        }
    };

    const handlePlayPause = () => {
        if (audioRef.current) {
            if (isPlaying) {
                audioRef.current.pause();
            } else {
                audioRef.current.play().catch(error => console.error('Error attempting to play audio:', error));
            }
            setIsPlaying(!isPlaying);
        }
    };

    const handleSkipForward = () => {
        let newIndex = (audioIndex + 1) % list.length;
        setAudioIndex(newIndex);
        const newItem = list[newIndex];
        setSelectedItem(newItem);
        setIsCard1Visible(false);
        setIsPlaying(true);

        if (audioRef.current) {
            audioRef.current.pause();
            audioRef.current.src = newItem.src;
            audioRef.current.load();
            setProgress(0);
            setCurrentTime('00:00');

            audioRef.current.addEventListener('canplaythrough', () => {
                audioRef.current.play().catch(error => console.error('Error attempting to play audio:', error));
            }, { once: true });
        }
    };

    const handleSkipBackward = () => {
        let newIndex = audioIndex - 1;
        if (newIndex < 0) {
            newIndex = list.length - 1;
        }
        setAudioIndex(newIndex);
        const newItem = list[newIndex];
        setSelectedItem(newItem);
        setIsCard1Visible(false);
        setIsPlaying(true);

        if (audioRef.current) {
            audioRef.current.pause();
            audioRef.current.src = newItem.src;
            audioRef.current.load();
            setProgress(0);
            setCurrentTime('00:00');

            audioRef.current.addEventListener('canplaythrough', () => {
                audioRef.current.play().catch(error => console.error('Error attempting to play audio:', error));
            }, { once: true });
        }
    };

    const updateProgress = () => {
        if (audioRef.current) {
            const currentTime = audioRef.current.currentTime;
            const duration = audioRef.current.duration;
            const progress = (currentTime / duration) * 100;
            setProgress(progress);

            const currentMinutes = Math.floor(currentTime / 60);
            const currentSeconds = Math.floor(currentTime % 60);
            setCurrentTime(`${currentMinutes.toString().padStart(2, '0')}:${currentSeconds.toString().padStart(2, '0')}`);
        }
    };

    const handleSongEnd = () => {
        handleSkipForward();
    };

    const handleProgressBarChange = (e) => {
        const newProgress = e.target.value;
        setProgress(newProgress);
        if (audioRef.current) {
            const duration = audioRef.current.duration;
            const newTime = (newProgress / 100) * duration;
            audioRef.current.currentTime = newTime;
            if (!isPlaying) {
                setIsPlaying(true);
                audioRef.current.play().catch(error => console.error('Error attempting to play audio:', error));
            }
        }
    };

    return (
        <div className="canvas">
            <div className="s-left">
                <div className="s-left-body">
                    <a href="index.html"><img src="back.png" alt="" style={{ width: '40px', margin: '2%' }} /></a>
                    <p className="text-5xl sm:text-xl md:text-5xl pb-5">90s Playlists</p>
                    <p style={{ color: 'gray', marginLeft: '6%' }} className="text-xs sm:text-xl md:text-xl pb-2">"90s Tamil playlists" are curated collections of Tamil music from the 1990s, offering a nostalgic journey through the era's diverse musical landscape.</p>
                    <hr />
                    <h3>Lists</h3>
                    {list.map((item, index) => (
                        <PlaylistItem key={item.id} name={item.name} onClick={() => handleItemClick(item, index)} />
                    ))}
                </div>
            </div>
            <div className="s-right">
                {isCard1Visible && (
                    <div id="card1">
                        <img src="logo1.png" alt="" />
                        <p>Enjoy the playlists songs</p>
                    </div>
                )}
                <div id="div3" className="s-right-canvas">
                    <div>
                    {selectedItem && (
                        <div className="card">
                            <p>90s playlists</p>
                            <p style={{ fontSize: '30px' }}>{selectedItem.name}</p>
                            <img src={selectedItem.image} alt={selectedItem.name} />
                            
                            <div className="icons">
                                <p>{selectedItem.name}</p>
                                <div className="flex items-center">
                                    <span className="w-12 text-center">{currentTime}</span>
                                    <input
                                        type="range"
                                        min="0"
                                        max="100"
                                        value={progress}
                                        onChange={handleProgressBarChange}
                                        className="progress-bar"
                                    />
                                    <span className="w-12 text-center">{totalTime}</span>
                                </div>
                            </div>
                            
                            <div className='flex flex-row m-10'>
                                <BsFillSkipStartCircleFill className='btn_action' style={{ fontSize: '50px', padding: '5px' }} onClick={handleSkipBackward} />
                                {isPlaying ? (
                                    <BsFillPauseCircleFill className='btn_action' style={{ fontSize: '50px', padding: '5px' }} onClick={handlePlayPause} />
                                ) : (
                                    <BsFillPlayCircleFill className='btn_action' style={{ fontSize: '50px', padding: '5px' }} onClick={handlePlayPause} />
                                )}
                                <BsFillSkipEndCircleFill className='btn_action' style={{ fontSize: '50px', padding: '5px' }} onClick={handleSkipForward} />
                            </div>
                            
                        </div>
                        
                    )}
                    
                </div>
            </div>
            <audio ref={audioRef} />
        </div>
        
        </div>
    );
};



.home {
    position: relative;
    height: 50vh; /* Full viewport height */
    background: url('/public/Home-page-BG.png') no-repeat fixed; /* Fixed background */
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    z-index: 1;
}

.home-content {
    padding: 20px;
    border-radius: 10px;
    z-index: 2;
    width: 100%;
}

body::after {
    content: '';
    display: block;
    background: linear-gradient(to top, rgba(23, 26, 63, 0) 0%, rgba(23, 26, 63, 1) 100%);
    position: absolute;
    top: 100vh; /* Start gradient after the full viewport height */
 width: 100%;
    z-index: 0;
}  

.home-content {
  position: absolute; /* Set position to absolute */
  top: 50%; /* Position the content at the center vertically */
  left: 50%; /* Position the content at the center horizontally */
  transform: translate(-50%, -50%); /* Center the content */
  padding: 20px; /* Adjust padding as needed */
  border-radius: 5px;
  font-size: 10vh;
  background-color: rgba(0, 0, 0, 0.5); /* Add a background color to make text more readable */
}
